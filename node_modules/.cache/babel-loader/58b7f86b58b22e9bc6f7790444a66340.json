{"ast":null,"code":"var _jsxFileName = \"/home/dana/Documents/Pixel38-Front/src/context/UserContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\nconst GET_SHIPMENTS = gql`\n  query ($id: ID!) {\n    user(id: $id) {\n      shipments {\n        id\n        waybill\n      }\n    }\n  }\n`;\n\nconst UserContextProvider = props => {\n  _s();\n\n  const [id, setId] = useState();\n  const [getShipments, {\n    error,\n    data\n  }] = useLazyQuery(GET_SHIPMENTS, {\n    variables: {\n      id: 1\n    }\n  });\n  const context = {\n    state: {\n      data,\n      loading,\n      error,\n      called\n    },\n    actions: {\n      getShipments,\n      setId\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserContextProvider, \"G3OKtuwsaooI8aYIwYlfbGPL7MU=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = UserContextProvider;\nexport default UserContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"sources":["/home/dana/Documents/Pixel38-Front/src/context/UserContext.js"],"names":["React","createContext","useState","useLazyQuery","gql","UserContext","GET_SHIPMENTS","UserContextProvider","props","id","setId","getShipments","error","data","variables","context","state","loading","called","actions","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,gBAAlC;;AAEA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEP,MAAMK,aAAa,GAAGF,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMG,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAM,CAACC,EAAD,EAAKC,KAAL,IAAcR,QAAQ,EAA5B;AACA,QAAM,CAACS,YAAD,EAAe;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,IAAoCV,YAAY,CACpDG,aADoD,EAEpD;AACEQ,IAAAA,SAAS,EAAE;AACTL,MAAAA,EAAE,EAAE;AADK;AADb,GAFoD,CAAtD;AASA,QAAMM,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE;AAAEH,MAAAA,IAAF;AAAQI,MAAAA,OAAR;AAAiBL,MAAAA,KAAjB;AAAwBM,MAAAA;AAAxB,KADO;AAEdC,IAAAA,OAAO,EAAE;AACPR,MAAAA,YADO;AAEPD,MAAAA;AAFO;AAFK,GAAhB;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEK,OAA7B;AAAA,cACGP,KAAK,CAACY;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxBD;;GAAMb,mB;UAEsCJ,Y;;;KAFtCI,mB;AA0BN,eAAeA,mBAAf","sourcesContent":["import React, { createContext, useState } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\n\nexport const UserContext = createContext();\n\nconst GET_SHIPMENTS = gql`\n  query ($id: ID!) {\n    user(id: $id) {\n      shipments {\n        id\n        waybill\n      }\n    }\n  }\n`;\n\nconst UserContextProvider = (props) => {\n  const [id, setId] = useState();\n  const [getShipments, { error, data,  }] = useLazyQuery(\n    GET_SHIPMENTS,\n    {\n      variables: {\n        id: 1,\n      },\n    }\n  );\n\n  const context = {\n    state: { data, loading, error, called },\n    actions: {\n      getShipments,\n      setId,\n    },\n  };\n\n  return (\n    <UserContext.Provider value={context}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}