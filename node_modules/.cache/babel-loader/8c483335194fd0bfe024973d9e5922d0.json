{"ast":null,"code":"var _jsxFileName = \"/home/dana/Documents/Pixel38-Front/src/context/UserContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext(props);\nconst GET_SHIPMENTS = gql`\n  query ($id: ID!) {\n    user(id: $id) {\n      shipments {\n        id\n        waybill\n      }\n    }\n  }\n`;\n\nconst UserContextProvider = () => {\n  _s();\n\n  const [getShipments, {\n    error,\n    data,\n    loading,\n    called\n  }] = useLazyQuery(GET_SHIPMENTS, {\n    variables: {\n      id\n    }\n  });\n  const context = {\n    state: {\n      data,\n      loading,\n      error,\n      called\n    },\n    actions: {\n      getCv,\n      addCv\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserContextProvider, \"go+FRj/qZryJf78p6cNfK2LJFQE=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = UserContextProvider;\nexport default UserContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"sources":["/home/dana/Documents/Pixel38-Front/src/context/UserContext.js"],"names":["React","createContext","useLazyQuery","gql","UserContext","props","GET_SHIPMENTS","UserContextProvider","getShipments","error","data","loading","called","variables","id","context","state","actions","getCv","addCv","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,gBAAlC;;AAEA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAACI,KAAD,CAAjC;AAEP,MAAMC,aAAa,GAAGH,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMI,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,YAAD,EAAe;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,GAAf,IAAmDV,YAAY,CACnEI,aADmE,EAEnE;AACEO,IAAAA,SAAS,EAAE;AACTC,MAAAA;AADS;AADb,GAFmE,CAArE;AASA,QAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAE;AAAEN,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBF,MAAAA,KAAjB;AAAwBG,MAAAA;AAAxB,KADO;AAEdK,IAAAA,OAAO,EAAE;AACPC,MAAAA,KADO;AAEPC,MAAAA;AAFO;AAFK,GAAhB;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEJ,OAA7B;AAAA,cACGV,KAAK,CAACe;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvBD;;GAAMb,mB;UACqDL,Y;;;KADrDK,mB;AAyBN,eAAeA,mBAAf","sourcesContent":["import React, { createContext } from \"react\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\n\nexport const UserContext = createContext(props);\n\nconst GET_SHIPMENTS = gql`\n  query ($id: ID!) {\n    user(id: $id) {\n      shipments {\n        id\n        waybill\n      }\n    }\n  }\n`;\n\nconst UserContextProvider = () => {\n  const [getShipments, { error, data, loading, called }] = useLazyQuery(\n    GET_SHIPMENTS,\n    {\n      variables: {\n        id,\n      },\n    }\n  );\n\n  const context = {\n    state: { data, loading, error, called },\n    actions: {\n      getCv,\n      addCv,\n    },\n  };\n\n  return (\n    <UserContext.Provider value={context}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n\nexport default UserContextProvider;\n"]},"metadata":{},"sourceType":"module"}